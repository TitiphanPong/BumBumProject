'use client';

import { Form, Input, Select, DatePicker, Button, Card, Upload } from 'antd';
import { useState } from 'react';
import dayjs from 'dayjs';
import { Divider , Checkbox} from 'antd';
import { Typography } from 'antd';
import { notification } from 'antd';
import { PlusOutlined } from '@ant-design/icons';
import { useEffect } from 'react';




const { Option } = Select;

const { Title } = Typography;

const ClaimForm = () => {
  const [api, contextHolder] = notification.useNotification(); // ‚úÖ ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç!
  const [form] = Form.useForm();
  const [loading, setLoading] = useState(false);
  const [selectedWarranty, setSelectedWarranty] = useState<string[]>([]);
  const [selectedVehicleClaim, setSelectedVehicleClaim] = useState<string[]>([]);
  const [selectedVehicleInspector, setSelectedVehicleInspector] = useState<string[]>([]);
  const [selectedServiceChargeStatus, setSelectedServiceChargeStatus] = useState<string[]>([]);
  const [imageUrls, setImageUrls] = useState<string[]>([]);
  const [productOptions, setProductOptions] = useState<string[]>([]);

    useEffect(() => {
    const fetchProducts = async () => {
      try {
        const res = await fetch('/api/get-productlist');
        const data = await res.json();
        console.log("üßæ ‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", data);  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
        const names = data.map((product: any) => product.name);
        setProductOptions(names);
      } catch (err) {
        console.error('‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', err);
      }
    };
    fetchProducts();
  }, []);

  
const onFinish = async (values: any) => {
  setLoading(true);

  const formattedValues = {
    ...values,
    image: imageUrls,
    receiverClaimDate: values.receiverClaimDate
      ? dayjs(values.receiverClaimDate).format('YYYY-MM-DD')
      : '',
    inspectionDate: values.inspectionDate
      ? dayjs(values.inspectionDate).format('YYYY-MM-DD')
      : '',
    claimDate: values.claimDate
      ? dayjs(values.claimDate).format('YYYY-MM-DD')
      : '',
    reportDate: values.reportDate
      ? dayjs(values.reportDate).format('YYYY-MM-DD')
      : '',
  };

  try {
    const res = await fetch('/api/submit-claim', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(formattedValues),
    });

    if (res.status === 200) {

      const inspectStatus = formattedValues.inspectstatus;
      const claimStatus = formattedValues.status;
      
        if (claimStatus === '‡∏à‡∏ö‡πÄ‡∏Ñ‡∏•‡∏°') {
          await fetch('/api/notify-claim', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              provinceName: values.provinceName,
              customerName: values.customerName,
              product: values.product,
              problemDetail: values.problem,
              warrantyStatus: selectedWarranty[0] || '-',
              claimer: values.claimSender || '-',
              vehicle: selectedVehicleClaim[0] || '-',
              claimDate: formattedValues.claimDate || '-',
              serviceFeeDeducted: selectedServiceChargeStatus[0] === '‡∏´‡∏±‡∏Å‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß',
              image: imageUrls,
              notifyType: '‡∏à‡∏ö‡πÄ‡∏Ñ‡∏•‡∏°',
            }),
          });
        } else if (inspectStatus === '‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö' && claimStatus !== '‡∏à‡∏ö‡πÄ‡∏Ñ‡∏•‡∏°') {
          await fetch('/api/notify-claim', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              provinceName: values.provinceName,
              customerName: values.customerName,
              product: values.product,
              problemDetail: values.problem,
              warrantyStatus: selectedWarranty[0] || '-',
              inspector: values.inspector || '-',
              vehicle: selectedVehicleInspector[0] || '-',
              inspectionDate: formattedValues.inspectionDate || '-',
              image: imageUrls,
              notifyType: '‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö',
            }),
          });
        }

      api.success({
        message: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        description: '‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡πÄ‡∏Ñ‡∏•‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
        placement: 'topRight',
        duration: 5,
      });
      
      form.resetFields();
      setSelectedWarranty([]);
      setSelectedVehicleClaim([]);
      setSelectedVehicleInspector([]);
      setSelectedServiceChargeStatus([]);
      setImageUrls([]); // ‚úÖ 3. reset ‡∏£‡∏π‡∏õ

    } else {
      throw new Error('‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    }
  } catch (error) {
    api.error({
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
      description: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
      placement: 'topRight',
      duration: 5,
    });
  } finally {
    setLoading(false);
  }
  };

  const onWarrantyChange = (checkedValues: any[]) => {
    if (checkedValues.length > 1) {
      checkedValues = [checkedValues[checkedValues.length - 1]];
    }
    setSelectedWarranty(checkedValues);
    form.setFieldsValue({ warranty: checkedValues });
  };

  const onVehicleClaimChange = (checkedValues: any[]) => {
    if (checkedValues.length > 1) {
      checkedValues = [checkedValues[checkedValues.length - 1]];
    }
    setSelectedVehicleClaim(checkedValues);
    form.setFieldsValue({ vehicleClaim: checkedValues });
  };

  const onVehicleInspectorChange = (checkedValues: any[]) => {
    if (checkedValues.length > 1) {
      checkedValues = [checkedValues[checkedValues.length - 1]];
    }
    setSelectedVehicleInspector(checkedValues);
    form.setFieldsValue({ vehicleInspector: checkedValues });
  };

  const onServiceChargeStatusChange = (checkedValues: any[]) => {
    if (checkedValues.length > 1) {
      checkedValues = [checkedValues[checkedValues.length - 1]];
    }
    setSelectedServiceChargeStatus(checkedValues);
    form.setFieldsValue({ serviceChargeStatus: checkedValues });
  }

  return (
    <Card title="üìã ‡πÉ‡∏ö‡πÄ‡∏Ñ‡∏•‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" style={{ maxWidth: 800, margin: 'auto' }}>
      {contextHolder}
      <Form
        form={form}
        layout="vertical"
        onFinish={onFinish}
        initialValues={{ reportDate: dayjs() }}
        validateTrigger="onSubmit"
        style={{ marginTop: 0 }}
      >
        <Title level={4}>‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï</Title>
        <Form.Item name="provinceName" label="‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£" rules={[{ required: true , message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£' }]}>
        <Select placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î">
            <Option value="‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø">‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø</Option>
            <Option value="‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡πÄ‡∏à‡∏£‡∏¥‡∏ç">‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡πÄ‡∏à‡∏£‡∏¥‡∏ç</Option>
            <Option value="‡πÇ‡∏Ñ‡∏£‡∏≤‡∏ä">‡πÇ‡∏Ñ‡∏£‡∏≤‡∏ä</Option>
            <Option value="‡∏≠‡∏∑‡πà‡∏ô ‡πÜ">‡∏≠‡∏∑‡πà‡∏ô ‡πÜ</Option>
          </Select>
        </Form.Item>

        <Form.Item name="customerName" label="‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤" rules={[{ required: true , message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠' }]}>
          <Input placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•" />
        </Form.Item>

        <Form.Item name="phone" label="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£" rules={[{ required: true , message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£' }]}>
          <Input placeholder="‡πÄ‡∏ä‡πà‡∏ô 081-234-5678" />
        </Form.Item>

        <Form.Item name="address" label="‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà" rules={[{ required: true , message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà' }]}>
          <Input.TextArea rows={2} placeholder="‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤" />
        </Form.Item>

        <Form.Item name="product" label="‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤">
          <Select
            placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
            style={{ width: '100%' }}
            tokenSeparators={[',']}
          >
            {productOptions.map((product) => (
              <Select.Option key={product} value={product}>
                {product}
              </Select.Option>
            ))}
          </Select>
        </Form.Item>

        <Form.Item name="problem" label="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤" rules={[{ required: true , message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤' }]}>
          <Input.TextArea rows={3} placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î, ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ä‡πá‡∏≠‡∏ï ‡∏Ø‡∏•‡∏Ø" />
        </Form.Item>


        <Form.Item name="warranty" label="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô" rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô' }]}>
          <Checkbox.Group value={selectedWarranty} onChange={onWarrantyChange}>
            <Checkbox value="‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô">‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô</Checkbox>
            <Checkbox value="‡∏´‡∏°‡∏î‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô">‡∏´‡∏°‡∏î‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô</Checkbox>
          </Checkbox.Group>
        </Form.Item>

        {/* ‡πÅ‡∏¢‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô */}
        <Divider />

        <Title level={4}>üßë‚Äçüîß  ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô</Title>


        <Form.Item name="receiver" label="‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏•‡∏°" >
          <Input placeholder="‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏•‡∏°" />
        </Form.Item>
        <Form.Item name="receiverClaimDate" label="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏•‡∏°" >
          <DatePicker format="DD/MM/YYYY" style={{ width: '100%' }} />
        </Form.Item>
        <Form.Item name="inspector" label="‡∏Ñ‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö" >
          <Input placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö" />
        </Form.Item>
        <Form.Item name="vehicleInspector" label="‡∏¢‡∏≤‡∏ô‡∏û‡∏≤‡∏´‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö">
          <Checkbox.Group value={selectedVehicleInspector} onChange={onVehicleInspectorChange}>
            <Checkbox value="‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå">‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå</Checkbox>
            <Checkbox value="‡∏£‡∏ñ‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏ã‡∏Ñ‡πå">‡∏£‡∏ñ‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏ã‡∏Ñ‡πå</Checkbox>
          </Checkbox.Group>
        </Form.Item>
        <Form.Item name="inspectionDate" label="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö" >
          <DatePicker format="DD/MM/YYYY" style={{ width: '100%' }} />
        </Form.Item>

        <Form.Item name="inspectstatus" label="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö" rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö' }]}>
          <Select placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö" style={{ width: '100%' }}>
            <Option value="‡πÑ‡∏õ‡πÄ‡∏≠‡∏á">‡πÑ‡∏õ‡πÄ‡∏≠‡∏á</Option>
            <Option value="‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö">‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö</Option>
            <Option value="‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö">‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö</Option>
            <Option value="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö</Option>
          </Select>
        </Form.Item>

        <Form.Item name="claimSender" label="‡∏Ñ‡∏ô‡πÑ‡∏õ‡πÄ‡∏Ñ‡∏•‡∏°">
          <Input placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏•‡∏°" />
        </Form.Item>
        <Form.Item name="vehicleClaim" label="‡∏¢‡∏≤‡∏ô‡∏û‡∏≤‡∏´‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡πÑ‡∏õ‡πÄ‡∏Ñ‡∏•‡∏°">
          <Checkbox.Group value={selectedVehicleClaim} onChange={onVehicleClaimChange}>
            <Checkbox value="‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå">‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå</Checkbox>
            <Checkbox value="‡∏£‡∏ñ‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏ã‡∏Ñ‡πå">‡∏£‡∏ñ‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏ã‡∏Ñ‡πå</Checkbox>
          </Checkbox.Group>
        </Form.Item>
        <Form.Item name="claimDate" label="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏•‡∏°" >
          <DatePicker format="DD/MM/YYYY" style={{ width: '100%' }} />
        </Form.Item>
        
        <Form.Item name="status" label="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏°" rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏°' }]}>
          <Select placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏°" style={{ width: '100%' }}>
            <Option value="‡πÑ‡∏õ‡πÄ‡∏≠‡∏á">‡πÑ‡∏õ‡πÄ‡∏≠‡∏á</Option>
            <Option value="‡∏£‡∏≠‡πÄ‡∏Ñ‡∏•‡∏°">‡∏£‡∏≠‡πÄ‡∏Ñ‡∏•‡∏°</Option>
            <Option value="‡∏à‡∏ö‡πÄ‡∏Ñ‡∏•‡∏°">‡∏à‡∏ö‡πÄ‡∏Ñ‡∏•‡∏°</Option>
            <Option value="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏Ñ‡∏•‡∏°">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏Ñ‡∏•‡∏°</Option>
          </Select>
        </Form.Item>

        {/* <Form.Item name="price" label="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô">
          <Input 
          placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô"
          prefix="‡∏ø"
          type='number' />
        </Form.Item> */}
        
        <Form.Item name="serviceChargeStatus" label="‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£">
          <Checkbox.Group value={selectedServiceChargeStatus} onChange={onServiceChargeStatusChange}>
            <Checkbox value="‡∏´‡∏±‡∏Å‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß">‡∏´‡∏±‡∏Å‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß</Checkbox>
            <Checkbox value="‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏±‡∏Å‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏±‡∏Å‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£</Checkbox>
          </Checkbox.Group>
        </Form.Item>

        <Form.Item name="image" label="‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û">
          <Upload
            name="file"
            listType="picture-card"
            showUploadList={true}
            maxCount={4}
            customRequest={async ({ file, onSuccess, onError }) => {
              try {
                const formData = new FormData();
                formData.append('file', file as Blob);
                formData.append('upload_preset', process.env.NEXT_PUBLIC_CLOUDINARY_UPLOAD_PRESET!);

                const res = await fetch(`https://api.cloudinary.com/v1_1/${process.env.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME}/image/upload`, {
                  method: 'POST',
                  body: formData,
                });

                const data = await res.json();
                if (data.secure_url) {
                  setImageUrls(prev => [...prev, data.secure_url]);
                  // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á setFieldsValue image ‡∏≠‡∏µ‡∏Å
                  onSuccess && onSuccess(data, new XMLHttpRequest());
                } else {
                  throw new Error('Upload failed');
                }
              } catch (err) {
                onError && onError(err as any);
              }
            }}
            // ‚úÖ 5. fileList ‡∏à‡∏≤‡∏Å imageUrls array
            fileList={imageUrls.map((url, idx) => ({
              uid: String(idx),
              name: `image${idx + 1}.png`,
              status: 'done',
              url,
            }))}
            // ‚úÖ 6. onRemove ‡∏ï‡∏±‡∏î url ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å array
            onRemove={file => {
              setImageUrls(urls => urls.filter(u => u !== file.url));
              return true;
            }}
          >
            {imageUrls.length < 4 && (
              <div>
                <PlusOutlined />
                <div style={{ marginTop: 8 }}>‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î</div>
              </div>
            )}
          </Upload>
        </Form.Item>

        <Form.Item name="note" label="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏">
          <Input.TextArea rows={2} />
        </Form.Item>

          <Button type="primary" htmlType="submit" loading={loading}>
            ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          </Button>
      </Form>
    </Card>
    
  );
};

export default ClaimForm;