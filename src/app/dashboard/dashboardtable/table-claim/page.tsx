'use client';

import { useEffect, useState } from 'react';
import { Modal, Form, Input, DatePicker, Button, Typography, Checkbox, Select, Divider, message, notification, Upload } from 'antd';
import dayjs from 'dayjs';
import CRUDClaim from '../components/CRUDClaim';
import PlusOutlined from '@ant-design/icons/lib/icons/PlusOutlined';

export default function DashboardTablePage() {
  const [claims, setClaims] = useState<any[]>([]);
  const [loading, setLoading] = useState(false);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedRow, setSelectedRow] = useState<any>(null);
  const [searchText, setSearchText] = useState('');
  const [form] = Form.useForm();
  const [filteredClaims, setFilteredClaims] = useState<any[]>([]);
  const [api, contextHolder] = notification.useNotification();
  const [modalImageUrls, setModalImageUrls] = useState<string[]>([]);


  const fetchClaims = async () => {
    setLoading(true);
    try {
      const res = await fetch('/api/get-claim', { cache: 'no-store' });
      const data = await res.json();

      const dataWithIds = data
        .filter((item: any) => !!item.id)
        .map((item: any) => ({
          ...item,
          id: item.id.trim(),
        }));

      const withId = data.map((d: any, index: number) => ({
        ...d,
        id: d.id?.trim() || `row-${index}`,
      }));

      setClaims(withId);
      setFilteredClaims(dataWithIds);
      setSearchText('');
    } catch (err) {
      message.error('‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchClaims();
  }, []);

  const handleSearch = (value: string) => {
    setSearchText(value);
    const lowerValue = value.toLowerCase();
    const filtered = claims.filter((item: any) =>
      Object.values(item).some(
        (field) => typeof field === 'string' && field.toLowerCase().includes(lowerValue)
      )
    );
    setFilteredClaims(filtered);
  };

const handleEdit = (record: any) => {

const parseDate = (dateStr: any) => {
  const parsed = dayjs(dateStr, ['D/M/YYYY', 'DD/MM/YYYY'], true);
  return parsed.isValid() ? parsed : null;
};

  form.setFieldsValue({
    provinceName: record.ProvinceName,
    customerName: record.CustomerName,
    phone: record.Phone,
    address: record.Address,
    product: record.Product,
    problem: record.Problem,
    warranty: Array.isArray(record.Warranty)
      ? record.Warranty
      : typeof record.Warranty === 'string'
        ? record.Warranty.split(', ').map((w: string) => w.trim())
        : [],
    receiver: record.receiver,
    receiverClaimDate: record.receiverClaimDate ? dayjs(record.receiverClaimDate) : null,
    inspector: record.inspector,
    vehicleInspector: Array.isArray(record.vehicleInspector)
      ? record.vehicleInspector
      : typeof record.vehicleInspector === 'string'
        ? record.vehicleInspector.split(', ').map((v: string) => v.trim())
        : [],
    inspectionDate: record.inspectionDate ? dayjs(record.inspectionDate) : null,
    inspectstatus: record.inspectstatus,
    claimSender: record.claimSender,
    vehicleClaim: Array.isArray(record.vehicleClaim)
      ? record.vehicleClaim
      : typeof record.vehicleClaim === 'string'
        ? record.vehicleClaim.split(', ').map((v: string) => v.trim())
        : [],
    claimDate: record.claimDate ? dayjs(record.claimDate) : null,
    status: record.status,
    price: record.price,
    serviceChargeStatus: Array.isArray(record.serviceChargeStatus)
      ? record.serviceChargeStatus
      : typeof record.serviceChargeStatus === 'string'
        ? record.serviceChargeStatus.split(', ').map((s: string) => s.trim())
        : [],
    note: record.note,
  });

  
  setModalImageUrls(
  record.image
    ? Array.isArray(record.image)
      ? record.image
      : [record.image]
    : []
);

  setSelectedRow(record);
  setIsModalOpen(true);
};


  const handleDelete = async (record: any) => {
    try {
      const res = await fetch('/api/delete-claim', {
        method: 'POST',
        body: JSON.stringify({ id: record.id, sheetName: '‡πÉ‡∏ö‡πÄ‡∏Ñ‡∏•‡∏°' }),
      });
      const result = await res.json();
      if (result.result === 'success') {
        api.success({
        message: '‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        description: `‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ${record.CustomerName || ''} ‡πÅ‡∏•‡πâ‡∏ß`,
        placement: 'topRight',
      });
        message.success('‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß');
        fetchClaims();
      } else {
        throw new Error(result.message);
      }
    } catch (err) {
      api.error({
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
      description: '‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà',
      placement: 'topRight',
    });
    }
  };

const handleSubmit = async (values: any) => {
  setLoading(true);

  if (!selectedRow?.id) {
    api.error({
      message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
      description: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ID ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï',
      placement: 'topRight',
    });
    setLoading(false);
    return;
  }

  const fullData = {
  id: selectedRow.id,
  ...values,
  sheetName: '‡πÉ‡∏ö‡πÄ‡∏Ñ‡∏•‡∏°',

  inspectionDate: values.inspectionDate?.isValid?.()
    ? values.inspectionDate.format('YYYY-MM-DD')
    : '',

  receiverClaimDate: values.receiverClaimDate?.isValid?.()
    ? values.receiverClaimDate.format('YYYY-MM-DD')
    : '',

  claimDate: values.claimDate?.isValid?.()
    ? values.claimDate.format('YYYY-MM-DD')
    : '',
};

  const imageUrls = modalImageUrls; // <-- ‡πÄ‡∏õ‡πá‡∏ô array ‡πÄ‡∏™‡∏°‡∏≠


  try {
    const res = await fetch('/api/update-claim', {
      method: 'POST',
      body: JSON.stringify({ ...fullData, image:imageUrls, action: 'update',  }), // ‚úî ‡πÄ‡∏û‡∏¥‡πà‡∏° action ‡πÄ‡∏ú‡∏∑‡πà‡∏≠ script ‡πÄ‡∏ä‡πá‡∏Å‡πÑ‡∏ß‡πâ
    });

    const result = await res.json();

    if (result?.result === 'success') {

      // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "‡∏à‡∏ö‡πÄ‡∏Ñ‡∏•‡∏°" ‚Üí ‡∏™‡πà‡∏á LINE

    const inspectStatus = fullData.inspectstatus;
    const claimStatus = fullData.status;

    // ‚úÖ fallback ‡∏Å‡∏•‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÑ‡∏•‡∏ô‡πå
    const notifyBase = {
      provinceName: fullData.provinceName,
      customerName: fullData.customerName,
      product: fullData.product,
      problemDetail: fullData.problem,
      warrantyStatus: fullData.warranty?.[0] || '-',
      image: imageUrls,
    };

    if (claimStatus === "‡∏à‡∏ö‡πÄ‡∏Ñ‡∏•‡∏°") {
      await fetch('/api/notify-claim', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          ...notifyBase,
          claimer: fullData.claimSender || '-',
          vehicle: fullData.vehicleClaim?.[0] || '-',
          claimDate: fullData.claimDate || '-',
          amount: fullData.price || '-' + ' ‡∏ö‡∏≤‡∏ó',
          serviceFeeDeducted: fullData.serviceChargeStatus?.[0] === '‡∏´‡∏±‡∏Å‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß',
          notifyType: '‡∏à‡∏ö‡πÄ‡∏Ñ‡∏•‡∏°',
        }),
      });
    } else if (inspectStatus === '‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö' && claimStatus !== '‡∏à‡∏ö‡πÄ‡∏Ñ‡∏•‡∏°') {
      await fetch('/api/notify-claim', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          ...notifyBase,
          inspector: fullData.inspector || '-',
          vehicle: fullData.vehicleInspector?.[0] || '-',
          inspectionDate: fullData.inspectionDate || '-',
          notifyType: '‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö',
        }),
      });
    }
      
      api.success({
        message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        description: '‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ö‡πÄ‡∏Ñ‡∏•‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
        placement: 'topRight',
      });
      message.success('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
      form.resetFields();
      setIsModalOpen(false);
      fetchClaims();
    } else {
      throw new Error(result?.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î');
    }
  } catch (err) {
    api.error({
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
      description: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà',
      placement: 'topRight',
    });
    message.error('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
  } finally {
    setLoading(false);
  }
};

  return (
    <div style={{ padding: 24, maxWidth: 1400, margin: 'auto' }}>
      {contextHolder}
      <Typography.Title level={3}>üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ö‡πÄ‡∏Ñ‡∏•‡∏°</Typography.Title>

      <Input.Search
        placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤"
        enterButton
        value={searchText}
        onChange={(e) => setSearchText(e.target.value)}
        onSearch={handleSearch}
        style={{ marginBottom: 24 }}
        allowClear
      />

      <CRUDClaim
        data={filteredClaims}
        title=""
        loading={loading}
        onEdit={handleEdit}
        onDelete={handleDelete}
        onRefresh={fetchClaims}
      />

      <Modal
        title={
         <div style={{ fontSize: 22, fontWeight: 'bold', color: '#000000ff', marginTop : 16 }}>
            üõ†Ô∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ö‡πÄ‡∏Ñ‡∏•‡∏°
          </div>
        }
        open={isModalOpen}
        onCancel={() => {
          setIsModalOpen(false);
          form.resetFields();
        }}
        footer={null}
        width={800}
      >
        <Form form={form} onFinish={handleSubmit} layout="vertical">
          <Divider />
          <Typography.Title level={4}>‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï</Typography.Title>
          <Form.Item name="provinceName" label="‡∏™‡∏≤‡∏Ç‡∏≤">
            <Select>
              <Select.Option value="‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø">‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø</Select.Option>
              <Select.Option value="‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡πÄ‡∏à‡∏£‡∏¥‡∏ç">‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡πÄ‡∏à‡∏£‡∏¥‡∏ç</Select.Option>
              <Select.Option value="‡πÇ‡∏Ñ‡∏£‡∏≤‡∏ä">‡πÇ‡∏Ñ‡∏£‡∏≤‡∏ä</Select.Option>
              <Select.Option value="‡∏≠‡∏∑‡πà‡∏ô‡πÜ">‡∏≠‡∏∑‡πà‡∏ô‡πÜ</Select.Option>
            </Select>
          </Form.Item>
          <Form.Item name="customerName" label="‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤"><Input /></Form.Item>
          <Form.Item name="phone" label="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£"><Input /></Form.Item>
          <Form.Item name="address" label="‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà"><Input /></Form.Item>
          <Form.Item name="product" label="‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"><Input /></Form.Item>
          <Form.Item name="problem" label="‡∏õ‡∏±‡∏ç‡∏´‡∏≤"><Input.TextArea /></Form.Item>
          <Form.Item name="warranty" label="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô">
            <Checkbox.Group>
              <Checkbox value="‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô">‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô</Checkbox>
              <Checkbox value="‡∏´‡∏°‡∏î‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô">‡∏´‡∏°‡∏î‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô</Checkbox>
            </Checkbox.Group>
          </Form.Item>

          <Divider />
          <Typography.Title level={4}>üßë‚Äçüîß  ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô</Typography.Title>
          <Form.Item name="receiver" label="‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏•‡∏°">
            <Input />
          </Form.Item>
          <Form.Item name="receiverClaimDate" label="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏•‡∏°"><DatePicker style={{ width: '100%' }} format="DD/MM/YYYY" /></Form.Item>
          <Form.Item name="inspector" label="‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö"><Input /></Form.Item>
          <Form.Item name="vehicleInspector" label="‡∏¢‡∏≤‡∏ô‡∏û‡∏≤‡∏´‡∏ô‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö">
            <Checkbox.Group>
              <Checkbox value="‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå">‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå</Checkbox>
              <Checkbox value="‡∏£‡∏ñ‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏ã‡∏Ñ‡πå">‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏ã‡∏Ñ‡πå</Checkbox>
            </Checkbox.Group>
          </Form.Item>
          <Form.Item name="inspectionDate" label="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö"><DatePicker style={{ width: '100%' }} format="DD/MM/YYYY" /></Form.Item>

          <Form.Item name="inspectstatus" label="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö">
          <Select placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö" style={{ width: '100%' }}>
            <Select.Option value="‡πÑ‡∏õ‡πÄ‡∏≠‡∏á">‡πÑ‡∏õ‡πÄ‡∏≠‡∏á</Select.Option>
            <Select.Option value="‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö">‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö</Select.Option>
            <Select.Option value="‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö">‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö</Select.Option>
            <Select.Option value="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö</Select.Option>
          </Select>
          </Form.Item>

          <Form.Item name="claimSender" label="‡∏Ñ‡∏ô‡πÑ‡∏õ‡πÄ‡∏Ñ‡∏•‡∏°"><Input /></Form.Item>
          <Form.Item name="vehicleClaim" label="‡∏¢‡∏≤‡∏ô‡∏û‡∏≤‡∏´‡∏ô‡∏∞‡πÑ‡∏õ‡πÄ‡∏Ñ‡∏•‡∏°">
            <Checkbox.Group>
              <Checkbox value="‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå">‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå</Checkbox>
              <Checkbox value="‡∏£‡∏ñ‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏ã‡∏Ñ‡πå">‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏ã‡∏Ñ‡πå</Checkbox>
            </Checkbox.Group>
          </Form.Item>
          <Form.Item name="claimDate" label="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏•‡∏°"><DatePicker style={{ width: '100%' }} format="DD/MM/YYYY" /></Form.Item>
          <Form.Item name="status" label="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞">
            <Select>
              <Select.Option value="‡πÑ‡∏õ‡πÄ‡∏≠‡∏á">‡πÑ‡∏õ‡πÄ‡∏≠‡∏á</Select.Option>
              <Select.Option value="‡∏£‡∏≠‡πÄ‡∏Ñ‡∏•‡∏°">‡∏£‡∏≠‡πÄ‡∏Ñ‡∏•‡∏°</Select.Option>
              <Select.Option value="‡∏à‡∏ö‡πÄ‡∏Ñ‡∏•‡∏°">‡∏à‡∏ö‡πÄ‡∏Ñ‡∏•‡∏°</Select.Option>
              <Select.Option value="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏Ñ‡∏•‡∏°">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏Ñ‡∏•‡∏°</Select.Option>
            </Select>
          </Form.Item>
          <Form.Item name="price" label="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô"><Input prefix="‡∏ø" type="number" /></Form.Item>
          <Form.Item name="serviceChargeStatus" label="‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£">
            <Checkbox.Group>
              <Checkbox value="‡∏´‡∏±‡∏Å‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß">‡∏´‡∏±‡∏Å‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß</Checkbox>
              <Checkbox value="‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏±‡∏Å‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏±‡∏Å‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£</Checkbox>
            </Checkbox.Group>
          </Form.Item>



          <Form.Item name="image" label="‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û">
            <Upload
              name="file"
              listType="picture-card"
              showUploadList={true}
              maxCount={4}
              customRequest={async ({ file, onSuccess, onError }) => {
                try {
                  const formData = new FormData();
                  formData.append('file', file as Blob);
                  formData.append('upload_preset', process.env.NEXT_PUBLIC_CLOUDINARY_UPLOAD_PRESET!);

                  const res = await fetch(`https://api.cloudinary.com/v1_1/${process.env.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME}/image/upload`, {
                    method: 'POST',
                    body: formData,
                  });

                  const data = await res.json();
                  if (data.secure_url) {
                    setModalImageUrls(prev => [...prev, data.secure_url]);
                    // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á setFieldsValue({ image: ... }) ‡∏≠‡∏µ‡∏Å
                    onSuccess && onSuccess(data, new XMLHttpRequest());
                  } else {
                    throw new Error('Upload failed');
                  }
                } catch (err) {
                  onError && onError(err as any);
                }
              }}
              fileList={modalImageUrls.map((url, idx) => ({
                uid: String(idx),
                name: `image${idx + 1}.png`,
                status: 'done',
                url,
              }))}
              onRemove={file => {
                setModalImageUrls(urls => urls.filter(u => u !== file.url));
                return true;
              }}
            >
              {modalImageUrls.length < 4 && (
                <div>
                  <PlusOutlined />
                  <div style={{ marginTop: 8 }}>‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î</div>
                </div>
              )}
            </Upload>
          </Form.Item>
          <Form.Item name="note" label="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏"><Input.TextArea /></Form.Item>

          <Button type="primary" htmlType="submit" loading={loading}>
            ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          </Button>
        </Form>
      </Modal>
    </div>
  );
}