'use client';

import { Table, Button, Space, Spin, message, Modal } from 'antd';
import {
  CheckCircleOutlined,
  ClockCircleOutlined,
  CloseCircleOutlined,
  ReloadOutlined,
  SyncOutlined,
} from '@ant-design/icons';
import dayjs from 'dayjs'; // ‚úÖ import dayjs ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î format ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
import utc from 'dayjs/plugin/utc';
import { useState } from 'react';
import { notification } from 'antd';
import { Tag } from 'antd';
dayjs.extend(utc);

interface CRUDClaimProps {
  data: any[];
  title?: string;
  onEdit: (record: any) => void;
  onDelete: (record: any) => void;
  onRefresh?: () => void;
  loading?: boolean;
}

export default function CRUDClaim({ data, onEdit, onRefresh, loading }: CRUDClaimProps) {
  const [api, contextHolder] = notification.useNotification();
  const [deletingRow, setDeletingRow] = useState<any>(null);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [deleting, setDeleting] = useState(false);

  const handleDeleteConfirmed = async () => {
    if (!deletingRow) return;
    setDeleting(true);

    try {
      const res = await fetch('/api/delete-claim', {
        method: 'POST',
        body: JSON.stringify({ id: deletingRow.id, sheetName: '‡πÉ‡∏ö‡πÄ‡∏Ñ‡∏•‡∏°' }),
      });

      const result = await res.json();
      if (result.result === 'success') {
        api.success({
          message: '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
          description: '‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
        });
        onRefresh?.(); // ‚úÖ ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      } else {
        throw new Error(result.message);
      }
    } catch (err) {
      console.error(err);
      api.error({
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
        description: '‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      });
    } finally {
      setIsDeleteModalOpen(false);
      setDeletingRow(null);
      setDeleting(false);
    }
  };

  const formatDate = (value: string) => {
    if (!value) return '-';
    return dayjs(value).isValid() ? dayjs(value).format('DD/MM/YYYY') : '-';
  };

  const renderStatusTag = (value: string) => {
    const statusMap: Record<string, { label: string; color: string; icon?: React.ReactNode }> = {
      ‡πÑ‡∏õ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏≠‡∏á: { label: '‡πÑ‡∏õ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏≠‡∏á', color: 'blue', icon: <ClockCircleOutlined /> },
      ‡πÑ‡∏õ‡πÄ‡∏Ñ‡∏•‡∏°‡πÄ‡∏≠‡∏á: { label: '‡πÑ‡∏õ‡πÄ‡∏Ñ‡∏•‡∏°‡πÄ‡∏≠‡∏á', color: 'blue', icon: <ClockCircleOutlined /> },
      ‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: { label: '‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö', color: 'yellow', icon: <SyncOutlined /> },
      ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: { label: '‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö', color: 'green', icon: <CheckCircleOutlined /> },
      ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: { label: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö', color: 'red', icon: <CloseCircleOutlined /> },
      ‡∏£‡∏≠‡πÄ‡∏Ñ‡∏•‡∏°: { label: '‡∏£‡∏≠‡πÄ‡∏Ñ‡∏•‡∏°', color: 'yellow', icon: <SyncOutlined /> },
      ‡∏à‡∏ö‡πÄ‡∏Ñ‡∏•‡∏°: { label: '‡∏à‡∏ö‡πÄ‡∏Ñ‡∏•‡∏°', color: 'green', icon: <CheckCircleOutlined /> },
      ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏Ñ‡∏•‡∏°: { label: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏Ñ‡∏•‡∏°', color: 'red', icon: <CloseCircleOutlined /> },
    };

    const tag = statusMap[value] || { label: value || '-', color: 'default' };
    return (
      <Tag color={tag.color} icon={tag.icon}>
        {tag.label}
      </Tag>
    );
  };

  const columns = [
    { title: '‡∏™‡∏≤‡∏Ç‡∏≤', dataIndex: 'ProvinceName', key: 'provinceName' },
    { title: '‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤', dataIndex: 'CustomerName', key: 'customerName' },
    // { title: '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£', dataIndex: 'Phone', key: 'phone' },
    // { title: '‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà', dataIndex: 'Address', key: 'address' },
    // { title: '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', dataIndex: 'Product', key: 'product' },
    // { title: '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤', dataIndex: 'Problem', key: 'problem' },
    // { title: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô', dataIndex: 'Warranty', key: 'warranty' },
    // { title: '‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏•‡∏°', dataIndex: 'receiver', key: 'receiver' },
    // {
    //   title: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏•‡∏°',
    //   dataIndex: 'receiverClaimDate',
    //   key: 'receiverClaimDate',
    //   render: formatDate,
    // },
    { title: '‡∏Ñ‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö', dataIndex: 'inspector', key: 'inspector' },
    // { title: '‡∏¢‡∏≤‡∏ô‡∏û‡∏≤‡∏´‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡πÄ‡∏Ñ‡∏•‡∏°', dataIndex: 'vehicleInspector', key: 'vehicleInspector' },
    // {
    //   title: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö',
    //   dataIndex: 'inspectionDate',
    //   key: 'inspectionDate',
    //   render: formatDate,
    // },

    {
      title: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö',
      dataIndex: 'inspectstatus',
      key: 'inspectstatus',
      render: renderStatusTag, // ‚úÖ ‡πÉ‡∏™‡πà tag
    },
    { title: '‡∏Ñ‡∏ô‡πÑ‡∏õ‡πÄ‡∏Ñ‡∏•‡∏°', dataIndex: 'claimSender', key: 'claimSender' },
    // { title: '‡∏¢‡∏≤‡∏ô‡∏û‡∏≤‡∏´‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡πÄ‡∏Ñ‡∏•‡∏°', dataIndex: 'vehicleClaim', key: 'vehicleClaim' },
    // {
    //   title: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏•‡∏°',
    //   dataIndex: 'claimDate',
    //   key: 'claimDate',
    //   render: formatDate,
    // },
    {
      title: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏°',
      dataIndex: 'status',
      key: 'status',
      render: renderStatusTag, // ‚úÖ ‡πÉ‡∏™‡πà tag
    },
    // { title: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô', dataIndex: 'price', key: 'price' },
    // { title: '‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£', dataIndex: 'serviceChargeStatus', key: 'serviceChargeStatus' },
    // { title: '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏', dataIndex: 'note', key: 'note' },
    {
      title: '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£',
      key: 'actions',
      render: (_: any, record: any) => (
        <Space>
          <Button icon="‚úèÔ∏è" onClick={() => onEdit(record)}>
            ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          </Button>
          {/* <Button danger type="primary" onClick={() => {
                setDeletingRow(record);
                setIsDeleteModalOpen(true);
              }}>
                üóëÔ∏è ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          </Button> */}
        </Space>
      ),
    },
  ];

  return (
    <>
      {contextHolder}

      <div style={{ marginBottom: 48 }}>
        <div
          style={{
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center',
            marginBottom: '0rem',
          }}></div>

        {loading ? (
          <div style={{ display: 'flex', justifyContent: 'center', padding: '2rem' }}>
            <Spin tip="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•..." />
          </div>
        ) : (
          <Table
            title={() => (
              <div
                style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <span>üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ö‡πÄ‡∏Ñ‡∏•‡∏°</span>
                <Button
                  type="primary"
                  icon={<ReloadOutlined />}
                  onClick={onRefresh}
                  loading={loading}
                  className="refresh-button">
                  <span className="refresh-text">‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</span>
                </Button>
              </div>
            )}
            columns={columns}
            dataSource={data}
            rowKey="id"
            pagination={{ pageSize: 8 }}
            scroll={{ x: 'max-content' }}
          />
        )}
        <Modal
          open={isDeleteModalOpen}
          title={
            <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>
              <span style={{ fontSize: 18, color: '#faad14' }}>‚ö†Ô∏è</span>
              <span style={{ fontSize: 20, fontWeight: 600 }}>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</span>
            </div>
          }
          onOk={handleDeleteConfirmed}
          onCancel={() => {
            setIsDeleteModalOpen(false);
            setDeletingRow(null);
            setDeleting(false);
          }}
          confirmLoading={deleting}
          okText="‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
          cancelText="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"
          okButtonProps={{ danger: true }}
          centered // ‚úÖ ‡πÄ‡∏î‡πâ‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
          width={350} // ‚úÖ ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏•‡∏≤‡∏á ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏µ
        >
          <div style={{ display: 'flex', gap: 24 }}>
            <div>
              <h1 style={{ marginBottom: 16 }}>‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?</h1>
            </div>
          </div>
        </Modal>
      </div>
    </>
  );
}
