'use client';

import { useEffect, useState } from 'react';
import {
  Table,
  Typography,
  Card,
  Grid,
  Input,
  Spin,
  Select,
} from 'antd';
import type { ColumnsType } from 'antd/es/table';

const { Title, Text } = Typography;
const { useBreakpoint } = Grid;
const { Option } = Select;

type PartsRow = {
  key: string;
  id: string;
  ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: string;
  ‡∏•‡∏≥‡∏î‡∏±‡∏ö: string;
  ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: string;
  ‡∏£‡∏≤‡∏Ñ‡∏≤: string;
  ‡∏´‡∏ô‡πà‡∏ß‡∏¢: string;
  ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô: string;
  ‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï: string;
  ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: string;
  isGroupHeader?: boolean;
};

const getCategoryColor = (category: string): string => {
  const map: Record<string, string> = {
    '‡∏•‡∏≥‡πÇ‡∏û‡∏á HM': '#fdecea',
    '‡∏•‡∏≥‡πÇ‡∏û‡∏á Coco (‡πÉ‡∏´‡∏ç‡πà)': '#e6f7ff',
    '‡∏•‡∏≥‡πÇ‡∏û‡∏á Coco (‡πÄ‡∏•‡πá‡∏Å)': '#fff7e6',
    '‡∏•‡∏≥‡πÇ‡∏û‡∏á ME': '#fff0f6',
    '‡∏û‡∏±‡∏î‡∏•‡∏° SN ‡∏™‡∏µ‡∏ü‡πâ‡∏≤': '#e6f4ff',
    '‡∏û‡∏±‡∏î‡∏•‡∏° Perfect': '#f6ffed',
    '‡∏™‡∏°‡∏≤‡∏£‡πå‡∏ó‡∏ó‡∏µ‡∏ß‡∏µ': '#f9f0ff',
  };
  return map[category] || '#f5f5f5';
};

export default function PartsPricePage() {
  const [data, setData] = useState<PartsRow[]>([]);
  const [filteredData, setFilteredData] = useState<PartsRow[]>([]);
  const [loading, setLoading] = useState(true);
  const [search, setSearch] = useState('');
  const [selectedCategory, setSelectedCategory] = useState<string>('');
  const screens = useBreakpoint();
  const isMobile = !screens.md;

  useEffect(() => {
    const fetchData = async () => {
      try {
        const res = await fetch('/api/get-parts-price');
        const json = await res.json();

        let lastCategory = '';
        const filled = json.map((item: any, index: number) => {
          const trimmed = item.‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤?.trim();
          if (trimmed) {
            lastCategory = trimmed;
          } else {
            item.‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ = lastCategory;
          }
          return {
            key: item.id || `${index + 1}`,
            ...item,
          };
        });

        setData(filled);
        setFilteredData(filled);
      } catch (err) {
        console.error('Failed to fetch:', err);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  useEffect(() => {
    const lower = search.toLowerCase();
    const filtered = data.filter(
      (item) =>
        (!selectedCategory || item.‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ === selectedCategory) &&
        (item.‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£?.toLowerCase().includes(lower) ||
          item.‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤?.toLowerCase().includes(lower) ||
          item.‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏?.toLowerCase().includes(lower))
    );
    setFilteredData(filtered);
  }, [search, selectedCategory, data]);

  const groupedData: PartsRow[] = [];
  let lastCategory = '';
  filteredData.forEach((item, i) => {
    if (item.‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ !== lastCategory) {
      groupedData.push({
        ...item,
        key: `group-${i}`,
        isGroupHeader: true,
      });
      lastCategory = item.‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤;
    }
    groupedData.push({ ...item, isGroupHeader: false });
  });

  const columns: ColumnsType<PartsRow> = [
    {
      title: '‡∏•‡∏≥‡∏î‡∏±‡∏ö',
      dataIndex: '‡∏•‡∏≥‡∏î‡∏±‡∏ö',
      key: '‡∏•‡∏≥‡∏î‡∏±‡∏ö',
      responsive: ['sm'],
      width: 70,
    },
    {
      title: '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£',
      dataIndex: '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£',
      key: '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£',
    },
    {
      title: '‡∏£‡∏≤‡∏Ñ‡∏≤',
      dataIndex: '‡∏£‡∏≤‡∏Ñ‡∏≤',
      key: '‡∏£‡∏≤‡∏Ñ‡∏≤',
      render: (value: string, row: PartsRow) =>
        value ? `${value} ${row.‡∏´‡∏ô‡πà‡∏ß‡∏¢?.trim() || '‡∏ö‡∏≤‡∏ó'}` : '',
    },
    {
      title: '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô',
      dataIndex: '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô',
      key: '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô',
      render: (value: string, row: PartsRow) =>
        value ? `${value} ${row.‡∏´‡∏ô‡πà‡∏ß‡∏¢?.trim() || '‡∏ö‡∏≤‡∏ó'}` : '',
    },
    {
      title: '‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï',
      dataIndex: '‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï',
      key: '‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï',
      render: (value: string) => (value ? `${value} ‡∏ö‡∏≤‡∏ó` : ''),
      responsive: ['sm'],
    },
    {
      title: '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏',
      dataIndex: '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏',
      key: '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏',
      responsive: ['md'],
    },
  ];

  const categoryOptions = Array.from(
    new Set(data.map((d) => d.‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤))
  ).map((cat) => ({ label: cat, value: cat }));

  return (
    <div className="p-4">
      <Card>
        <Title level={3}>üßæ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡πÅ‡∏•‡∏∞‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå</Title>
        <Text type="secondary">
          * <span style={{ color: 'red' }}>‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô 1 ‡∏õ‡∏µ ‡πÅ‡∏ú‡∏á‡πÅ‡∏•‡∏∞‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô</span> *
        </Text>

        <div className="flex flex-col sm:flex-row gap-2 mt-4">
          <Input.Search
            placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£..."
            allowClear
            onChange={(e) => setSearch(e.target.value)}
            style={{ maxWidth: 300 }}
          />

          <Select
            allowClear
            placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
            style={{ minWidth: 200 }}
            onChange={(value) => setSelectedCategory(value || '')}
          >
            {categoryOptions.map((opt) => (
              <Option key={opt.value} value={opt.value}>
                {opt.label}
              </Option>
            ))}
          </Select>
        </div>

        {loading ? (
          <div className="text-center p-10">
            <Spin />
          </div>
        ) : !isMobile ? (
          <Table
            className="mt-4"
            columns={columns}
            dataSource={groupedData}
            bordered
            pagination={{ pageSize: 50 }}
            scroll={{ x: 'max-content' }}
            rowKey="key"
            components={{
              body: {
                row: ({ children, ...props }) => {
                  const record = groupedData.find(
                    (r) => r.key === props['data-row-key']
                  );
                  if (record?.isGroupHeader) {
                    return (
                      <tr {...props}>
                        <td
                          colSpan={columns.length}
                          className="font-semibold text-md px-4 py-2"
                          style={{
                            backgroundColor: getCategoryColor(record.‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤),
                            textAlign: 'center',
                          }}
                        >
                          {record.‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤}
                        </td>
                      </tr>
                    );
                  }
                  return <tr {...props}>{children}</tr>;
                },
              },
            }}
          />
        ) : (
          <div className="flex flex-col gap-5 mt-4">
              {Object.entries(
                filteredData.reduce((acc, item) => {
                  if (!acc[item.‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤]) acc[item.‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤] = [];
                  acc[item.‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤].push(item);
                  return acc;
                }, {} as Record<string, PartsRow[]>)
              ).map(([category, items]) => (
                <div key={category} className="flex flex-col gap-2">
                  <div
                    className="px-3 py-1 font-semibold rounded text-center"
                    style={{ backgroundColor: getCategoryColor(category) }}
                  >
                    {category}
                  </div>
                  {items.map((item) => (
                    <Card size="small" key={item.key}>
                      <p><strong>‡∏•‡∏≥‡∏î‡∏±‡∏ö:</strong> {item.‡∏•‡∏≥‡∏î‡∏±‡∏ö}</p>
                      <p><strong>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:</strong> {item.‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£}</p>
                      <p><strong>‡∏£‡∏≤‡∏Ñ‡∏≤:</strong> {item.‡∏£‡∏≤‡∏Ñ‡∏≤ ? `${item.‡∏£‡∏≤‡∏Ñ‡∏≤} ${item.‡∏´‡∏ô‡πà‡∏ß‡∏¢?.trim() || '‡∏ö‡∏≤‡∏ó'}` : ''}</p>

                      {item.‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô && (
                        <p>
                          <strong>‡∏£‡∏≤‡∏Ñ‡∏≤(‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô):</strong>{' '}
                          {`${item.‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô} ${item.‡∏´‡∏ô‡πà‡∏ß‡∏¢?.trim() || '‡∏ö‡∏≤‡∏ó'}`}
                        </p>
                      )}

                      {item.‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï && (
                        <p><strong>‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï:</strong> {item.‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï} ‡∏ö‡∏≤‡∏ó</p>
                      )}
                      {item.‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ && (
                        <p><strong>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</strong> {item.‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏}</p>
                      )}
                    </Card>
                  ))}
                </div>
              ))}
            </div>
        )}
      </Card>
    </div>
  );
}